#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —Å Ozon.ru
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from app.logger import logger


async def search_and_select_first_product(tool, search_query):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""

    print(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: '{search_query}'")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    print("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
    page = await tool._ensure_browser_ready()
    print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
    print("üîé –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
    search_result = await tool.execute(
        action="search", query=search_query, max_results=5
    )

    if search_result.error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_result.error}")
        return None

    print("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n{search_result.output}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    lines = search_result.output.split("\n")
    first_product_url = None

    for line in lines:
        if line.startswith("üîó https://www.ozon.ru/product/"):
            first_product_url = line.replace("üîó ", "").strip()
            break

    if not first_product_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä")
        return None

    print(f"üì± –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_product_url}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    print("üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞...")
    await page.goto(first_product_url, wait_until="networkidle", timeout=30000)
    await asyncio.sleep(3)
    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    return first_product_url


async def test_reviews_link_extraction():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"""

    print("üîó –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã")
    print("=" * 40)

    try:
        from app.tool.ozon_tool import OzonTool

        tool = OzonTool()

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        search_query = "iphone"
        product_url = await search_and_select_first_product(tool, search_query)

        if not product_url:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (–±—Ä–∞—É–∑–µ—Ä —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞)
        page = tool._page

        if not page:
            print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None

        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç–∑—ã–≤—ã
        print("üîç –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã...")
        reviews_link = await tool._find_reviews_link(page)

        if reviews_link:
            print(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã –Ω–∞–π–¥–µ–Ω–∞: {reviews_link}")
            return reviews_link
        else:
            print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã –ù–ï –Ω–∞–π–¥–µ–Ω–∞")

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print("\nüîç –û—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ webSingleProductScore
            score_widget = await page.query_selector(
                "div[data-widget='webSingleProductScore']"
            )
            if score_widget:
                print("‚úÖ –í–∏–¥–∂–µ—Ç webSingleProductScore –Ω–∞–π–¥–µ–Ω")
                score_html = await score_widget.inner_html()
                print(f"üìù HTML –≤–∏–¥–∂–µ—Ç–∞: {score_html[:200]}...")
            else:
                print("‚ùå –í–∏–¥–∂–µ—Ç webSingleProductScore –ù–ï –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å reviews
            all_review_links = await page.query_selector_all("a[href*='/reviews/']")
            print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ —Å '/reviews/': {len(all_review_links)}")

            for i, link in enumerate(all_review_links[:3]):
                href = await link.get_attribute("href")
                text = await link.inner_text()
                print(f"   {i+1}. {href} - '{text[:50]}...'")

            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try:
            await tool.cleanup()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass


async def test_reviews_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"""

    print("\nüìù –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
    print("=" * 40)

    try:
        from app.tool.ozon_tool import OzonTool

        tool = OzonTool()

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        search_query = "samsung"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        product_url = await search_and_select_first_product(tool, search_query)

        if not product_url:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False

        print(f"üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è: {product_url}")

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
        result = await tool.execute(
            action="get_reviews", product_url=product_url, max_reviews=5
        )

        if result.error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {result.error}")
            return False
        else:
            print("‚úÖ –û—Ç–∑—ã–≤—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.output}")
            return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try:
            await tool.cleanup()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass


async def test_ozon_only_agent_reviews():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ OzonOnlyAgent —Å –ø–æ–∏—Å–∫–æ–º"""

    print("\nü§ñ –¢–µ—Å—Ç OzonOnlyAgent - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤")
    print("=" * 50)

    try:
        from app.agent.ozon_only import OzonOnlyAgent

        agent = OzonOnlyAgent()

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–∑—ã–≤–æ–≤
        test_query = "–ù–∞–π–¥–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω xiaomi –Ω–∞ –æ–∑–æ–Ω–µ, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"

        print(f"üí≠ –ó–∞–ø—Ä–æ—Å: {test_query}")
        print("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...")

        result = await agent.run(test_query)

        print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ OzonOnlyAgent: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç
        try:
            await agent.cleanup()
            print("üîí –ê–≥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
        except:
            pass


async def test_alternative_product():
    """–¢–µ—Å—Ç —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""

    print("\nüîÑ –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 40)

    try:
        from app.tool.ozon_tool import OzonTool

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        search_queries = [
            "–Ω–∞—É—à–Ω–∏–∫–∏",
            "–ø–ª–∞–Ω—à–µ—Ç",
        ]  # –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏

        for i, search_query in enumerate(search_queries, 1):
            print(f"\nüîç –¢–µ—Å—Ç {i}/{len(search_queries)}: –ü–æ–∏—Å–∫ '{search_query}'")

            tool = OzonTool()

            try:
                product_url = await search_and_select_first_product(tool, search_query)

                if product_url:
                    print(f"‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product_url}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã
                    page = tool._page
                    if page:
                        reviews_link = await tool._find_reviews_link(page)
                        if reviews_link:
                            print(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã –Ω–∞–π–¥–µ–Ω–∞: {reviews_link}")
                        else:
                            print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"‚ùå –¢–æ–≤–∞—Ä '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ '{search_query}': {e}")

            finally:
                try:
                    await tool.cleanup()
                    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                except:
                    pass

        print("\n‚úÖ –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–¢–ó–´–í–û–í OZON")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫:")
    print("1. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
    print("2. –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("3. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞")
    print("4. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤")
    print("5. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤")
    print("=" * 60)

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã", test_reviews_link_extraction),
        ("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤", test_reviews_extraction),
        ("–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤", test_alternative_product),
        ("OzonOnlyAgent —Å –ø–æ–∏—Å–∫–æ–º", test_ozon_only_agent_reviews),
    ]

    results = []

    for test_name, test_func in tests:
        print(f"\nüß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: {test_name}")
        print("-" * 50)
        try:
            result = asyncio.run(test_func())
            results.append((test_name, result))
            if result:
                print(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô: {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)

    passed_tests = sum(1 for _, result in results if result)
    total_tests = len(results)

    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"   {test_name}: {status}")

    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüí° –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   - –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä")
        print("   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã")
        print("   - –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤")
        print("   - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ç–∑—ã–≤—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        print("   - –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")


if __name__ == "__main__":
    main()
